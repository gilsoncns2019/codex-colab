import re
from api_manager import GeminiAPIManager, EnhancedAgent

class TranscriberExtractorAgent(EnhancedAgent):
    def __init__(self, api_manager: GeminiAPIManager, model_name: str = 'gemini-pro'):
        prompt = """
        Voc√™ √© o Agente 1: Transcritor/Extrator de Conte√∫do. Sua fun√ß√£o √© realizar a transcri√ß√£o fiel de √°udios/v√≠deos ou a extra√ß√£o precisa de texto de PDFs/slides. Voc√™ n√£o interpreta, resume ou opina, apenas captura a mat√©ria-prima. Sua sa√≠da deve manter a fidelidade ao conte√∫do original, incluindo quest√µes de revis√£o e gabaritos.
        
        Instru√ß√µes espec√≠ficas:
        - Mantenha a fidelidade absoluta ao conte√∫do original
        - N√£o remova informa√ß√µes importantes
        - Preserve quest√µes, gabaritos e coment√°rios
        - Identifique e marque claramente bizus e dicas
        """
        super().__init__("Transcritor/Extrator de Conte√∫do", prompt, api_manager, model_name)

    def process(self, content):
        """
        Processa o conte√∫do bruto extraindo e organizando as informa√ß√µes.
        Combina processamento baseado em regex com IA para maior precis√£o.
        """
        processed_content = content
        bizus = []
        questions = []

        # Patterns to remove administrative/boilerplate content
        patterns_to_remove = [
            r'(?is)Apresenta√ß√£o do Curso.*?(?=\n\n|\Z)',
            r'(?is)Sum√°rio.*?(?=\n\n|\Z)',
            r'(?is)√çndice.*?(?=\n\n|\Z)',
            r'(?is)Conte√∫do Introdut√≥rio e Administrativo.*?(?=\n\n|\Z)',
            r'(?is)Material Publicit√°rio.*?(?=\n\n|\Z)',
            r'(?is)Metadados de Origem.*?(?=\n\n|\Z)',
            r'(?i)P√°gina \d+',
            r'(?i)Direitos Autorais ¬© \d{4}',
            r'(?is)Se√ß√µes de Exerc√≠cios.*?(?=\n\n|\Z)',
            r'(?is)Exerc√≠cios N√£o Comentados/Resolvidos.*?(?=\n\n|\Z)',
        ]

        for pattern in patterns_to_remove:
            processed_content = re.sub(pattern, 
                                       lambda m: '' if 'Quest√£o' not in m.group(0) and 'Gabarito' not in m.group(0) else m.group(0),
                                       processed_content)

        # Extrair bizus usando regex e IA para valida√ß√£o
        bizu_pattern = r'(?i)(bizu\s*[:!].*?(?:\n|$))'
        bizu_matches = list(re.finditer(bizu_pattern, processed_content))
        
        for match in reversed(bizu_matches):
            bizus.append(match.group(0).strip())
            processed_content = processed_content[:match.start()] + processed_content[match.end():]
        bizus.reverse()

        # Se o conte√∫do for complexo, usar IA para identificar bizus adicionais
        if len(processed_content) > 1000:
            try:
                ai_bizus = self.process_with_gemini(f"Identifique dicas, macetes ou bizus importantes no seguinte texto. Retorne apenas as dicas encontradas, uma por linha: {processed_content}")
                if ai_bizus and ai_bizus.strip():
                    for line in ai_bizus.strip().split('\n'):
                        if line.strip() and line.strip() not in [b.strip() for b in bizus]:
                            bizus.append(f"Bizu: {line.strip()}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao processar bizus com IA: {e}")

        # Extrair quest√µes de revis√£o
        question_pattern = r'(?is)(Quest√£o\s*\d*\s*\(.*?\).*?(?:Alternativa\s*[A-Z]\).*?)*Gabarito\s*[:!].*?Coment√°rio\s*[:!].*?(?:\n\n|\Z))'
        question_matches = list(re.finditer(question_pattern, processed_content))

        for match in reversed(question_matches):
            questions.append(match.group(0).strip())
            processed_content = processed_content[:match.start()] + processed_content[match.end():]
        questions.reverse()

        return {
            'main_content': processed_content.strip(),
            'bizus': bizus,
            'questions': questions
        }

class StructurerVisualizerAgent(EnhancedAgent):
    def __init__(self, api_manager: GeminiAPIManager, model_name: str = 'gemini-pro'):
        prompt = """
        Voc√™ √© o Agente 2: Estruturador e Visualizador. Sua fun√ß√£o √© organizar o conte√∫do bruto em uma estrutura l√≥gica de Markdown, aplicando heur√≠sticas de visualiza√ß√£o para decidir qual diagrama (Mermaid) √© mais apropriado para cada tipo de informa√ß√£o.
        
        Instru√ß√µes espec√≠ficas:
        - Organize o conte√∫do em se√ß√µes claras e hier√°rquicas
        - Use formata√ß√£o Markdown apropriada (t√≠tulos, listas, √™nfases)
        - Sugira diagramas Mermaid quando apropriado
        - Mantenha a legibilidade e navegabilidade
        - Preserve toda a informa√ß√£o importante
        """
        super().__init__("Estruturador e Visualizador", prompt, api_manager, model_name)

    def process(self, extracted_data):
        main_content = extracted_data.get('main_content', '')
        bizus = extracted_data.get('bizus', [])
        questions = extracted_data.get('questions', [])

        structured_content = "# Conte√∫do Estruturado\n\n"
        
        if main_content:
            structured_content += "## Conte√∫do Principal\n\n"
            
            # Usar IA para estruturar conte√∫do complexo
            if len(main_content) > 500:
                try:
                    ai_structured = self.process_with_gemini(f"""
                    Estruture o seguinte conte√∫do em Markdown bem organizado:
                    - Use t√≠tulos e subt√≠tulos apropriados (##, ###)
                    - Crie listas quando apropriado
                    - Mantenha par√°grafos bem formatados
                    - Preserve toda a informa√ß√£o original
                    - N√£o adicione informa√ß√µes que n√£o est√£o no texto original
                    
                    Conte√∫do: {main_content}
                    """)
                    structured_content += ai_structured + "\n\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao estruturar com IA, usando conte√∫do original: {e}")
                    structured_content += main_content + "\n\n"
            else:
                structured_content += main_content + "\n\n"
        
        if bizus:
            structured_content += "## üí° Bizus e Dicas Importantes\n\n"
            for i, bizu in enumerate(bizus, 1):
                clean_bizu = bizu.replace("Bizu:", "").replace("bizu:", "").strip()
                structured_content += f"> [!TIP] **Bizu {i}:** {clean_bizu}\n\n"
        
        if questions:
            structured_content += "## üìù Quest√µes de Revis√£o\n\n"
            for i, question_text in enumerate(questions, 1):
                # Usar IA para melhor formata√ß√£o das quest√µes
                try:
                    formatted_question = self.process_with_gemini(f"""
                    Formate a seguinte quest√£o em Markdown bem estruturado:
                    - Separe claramente o enunciado, alternativas, gabarito e coment√°rio
                    - Use formata√ß√£o apropriada para cada se√ß√£o
                    - Mantenha toda a informa√ß√£o original
                    
                    Quest√£o: {question_text}
                    """)
                    structured_content += f"### Quest√£o {i}\n\n{formatted_question}\n\n---\n\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao formatar quest√£o com IA: {e}")
                    # Fallback para formata√ß√£o manual
                    question_parts_match = re.search(r'(?is)(Quest√£o\s*\d*\s*\(.*?\).*?)(Alternativa\s*[A-Z]\).*?(?:\nAlternativa\s*[A-Z]\).*?)*)(Gabarito\s*[:!].*?)(Coment√°rio\s*[:!].*)', question_text)
                    
                    if question_parts_match:
                        q_body = question_parts_match.group(1).strip()
                        alternatives_raw = question_parts_match.group(2).strip()
                        gabarito = question_parts_match.group(3).strip()
                        comentario = question_parts_match.group(4).strip()

                        structured_content += f"### Quest√£o {i}\n\n"
                        structured_content += f"{q_body}\n\n"
                        
                        formatted_alternatives = []
                        for alt_line in alternatives_raw.split('\n'):
                            if alt_line.strip():
                                formatted_alternatives.append(f"- [ ] {alt_line.strip()}")
                        structured_content += '\n'.join(formatted_alternatives) + "\n\n"
                        
                        structured_content += f"**{gabarito}**\n\n"
                        structured_content += f"**{comentario}**\n\n"
                        structured_content += f"---\n\n"
                    else:
                        structured_content += f"### Quest√£o {i}\n\n{question_text}\n\n---\n\n"

        # Sugerir diagramas usando IA
        try:
            diagram_suggestion = self.process_with_gemini(f"""
            Analise o seguinte conte√∫do e determine se seria √∫til adicionar um diagrama Mermaid.
            Se sim, especifique o tipo (flowchart, sequenceDiagram, graph, mindmap, etc.) e forne√ßa o c√≥digo Mermaid.
            Se n√£o for apropriado, responda apenas 'Nenhum diagrama necess√°rio'.
            
            Conte√∫do: {main_content[:1000]}
            """)
            
            if 'mermaid' in diagram_suggestion.lower() and 'nenhum' not in diagram_suggestion.lower():
                structured_content += "## üìä Diagrama Ilustrativo\n\n"
                structured_content += diagram_suggestion + "\n\n"
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar diagrama: {e}")

        return {
            'structured_content': structured_content,
            'has_math': '$' in main_content or 'f√≥rmula' in main_content.lower() or 'equa√ß√£o' in main_content.lower()
        }

class LatexExpertAgent(EnhancedAgent):
    def __init__(self, api_manager: GeminiAPIManager, model_name: str = 'gemini-pro'):
        prompt = """
        Voc√™ √© o Agente 3: Especialista em LaTeX. Sua fun√ß√£o √© auxiliar na gera√ß√£o de c√≥digo LaTeX para f√≥rmulas e express√µes matem√°ticas, garantindo que a sintaxe esteja correta e seja compat√≠vel com o MathJax do Obsidian.
        
        Instru√ß√µes espec√≠ficas:
        - Valide e corrija sintaxe LaTeX
        - Garanta compatibilidade com MathJax
        - Use $...$ para f√≥rmulas inline
        - Use $$...$$ para f√≥rmulas em bloco
        - Mantenha formata√ß√£o clara e leg√≠vel
        """
        super().__init__("Especialista em LaTeX", prompt, api_manager, model_name)

    def process(self, structured_data):
        structured_content = structured_data.get('structured_content', '')
        has_math = structured_data.get('has_math', False)

        if has_math:
            try:
                # Usar IA para validar e melhorar LaTeX
                latex_improved = self.process_with_gemini(f"""
                Revise e melhore a sintaxe LaTeX no seguinte texto:
                - Corrija erros de sintaxe LaTeX
                - Garanta compatibilidade com MathJax do Obsidian
                - Mantenha f√≥rmulas inline com $...$ e em bloco com $$...$$
                - N√£o altere o conte√∫do n√£o-matem√°tico
                - Retorne o texto completo com as corre√ß√µes
                
                Texto: {structured_content}
                """)
                structured_content = latex_improved
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao processar LaTeX com IA: {e}")
                # Fallback para corre√ß√£o b√°sica com regex
                structured_content = re.sub(r'\$([^$]+?)\$', r'$\1$', structured_content)
                structured_content = re.sub(r'\$\$([^$]+?)\$\$', r'$$\1$$', structured_content)
            
            structured_content += "\n> [!NOTE] üßÆ Este conte√∫do cont√©m f√≥rmulas matem√°ticas renderizadas com LaTeX/MathJax.\n\n"

        return {
            'content': structured_content,
            'latex_processed': has_math
        }

class ObsidianFormatterAgent(EnhancedAgent):
    def __init__(self, api_manager: GeminiAPIManager, model_name: str = 'gemini-pro'):
        prompt = """
        Voc√™ √© o Agente 4: Formatador Final Obsidian. Sua fun√ß√£o √© revisar a nota completa para garantir que toda a formata√ß√£o Markdown esteja correta, que os links internos e externos funcionem, e que a nota seja clara, naveg√°vel e otimizada para o uso no Obsidian.
        
        Instru√ß√µes espec√≠ficas:
        - Revise toda a formata√ß√£o Markdown
        - Adicione tags relevantes e √∫teis
        - Garanta navegabilidade e clareza
        - Otimize para uso no Obsidian
        - Mantenha consist√™ncia na formata√ß√£o
        """
        super().__init__("Formatador Final Obsidian", prompt, api_manager, model_name)

    def process(self, latex_data):
        content = latex_data.get('content', '')
        latex_processed = latex_data.get('latex_processed', False)

        try:
            # Usar IA para revis√£o final e adi√ß√£o de tags
            final_review = self.process_with_gemini(f"""
            Fa√ßa uma revis√£o final desta nota para Obsidian:
            - Corrija qualquer problema de formata√ß√£o Markdown
            - Adicione tags relevantes no final (formato: tags: [tag1, tag2, tag3])
            - Garanta que t√≠tulos est√£o bem hierarquizados
            - Verifique se listas e formata√ß√µes est√£o corretas
            - Mantenha todo o conte√∫do original
            - Retorne apenas o conte√∫do revisado, sem coment√°rios adicionais
            
            Nota: {content}
            """)
            
            final_content = final_review
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na revis√£o final com IA: {e}")
            final_content = content
            
            # Adicionar tags b√°sicas se LaTeX foi processado
            if latex_processed and "tags:" not in final_content.lower():
                final_content += "\n---\ntags: [matem√°tica, latex, estudo]\n"

        # Adicionar metadados do Obsidian se n√£o existirem
        if not final_content.startswith("---"):
            metadata = f"---\ncreated: {time.strftime('%Y-%m-%d')}\ntags: [processado, multi-agente]\n---\n\n"
            final_content = metadata + final_content

        return final_content


def process_content_with_enhanced_agents(raw_content, api_keys, model_names=None):
    """
    Processa conte√∫do usando agentes aprimorados com m√∫ltiplas chaves API.
    
    Args:
        raw_content: Conte√∫do bruto a ser processado
        api_keys: Lista de chaves da API Gemini
        model_names: Dicion√°rio com modelos espec√≠ficos por agente
    
    Returns:
        Conte√∫do processado e formatado
    """
    if model_names is None:
        model_names = {
            'TranscriberExtractorAgent': 'gemini-pro',
            'StructurerVisualizerAgent': 'gemini-pro',
            'LatexExpertAgent': 'gemini-pro',
            'ObsidianFormatterAgent': 'gemini-pro'
        }

    # Criar gerenciador de API
    api_manager = GeminiAPIManager(api_keys)
    
    # Criar agentes
    transcriber = TranscriberExtractorAgent(api_manager, model_names.get('TranscriberExtractorAgent'))
    structurer = StructurerVisualizerAgent(api_manager, model_names.get('StructurerVisualizerAgent'))
    latex_expert = LatexExpertAgent(api_manager, model_names.get('LatexExpertAgent'))
    formatter = ObsidianFormatterAgent(api_manager, model_names.get('ObsidianFormatterAgent'))

    print(f"\nüöÄ Iniciando Processamento Multi-Agente com Gemini API")
    print(f"üìä Status inicial: {api_manager.get_status()}")

    try:
        # Processamento sequencial pelos agentes
        print(f"\nüîÑ Executando Agente 1: {transcriber.name}")
        extracted_data = transcriber.process(raw_content)
        print(f"‚úÖ Agente 1 conclu√≠do")

        print(f"\nüîÑ Executando Agente 2: {structurer.name}")
        structured_data = structurer.process(extracted_data)
        print(f"‚úÖ Agente 2 conclu√≠do")

        print(f"\nüîÑ Executando Agente 3: {latex_expert.name}")
        latex_data = latex_expert.process(structured_data)
        print(f"‚úÖ Agente 3 conclu√≠do")

        print(f"\nüîÑ Executando Agente 4: {formatter.name}")
        final_note = formatter.process(latex_data)
        print(f"‚úÖ Agente 4 conclu√≠do")

        print(f"\nüéâ Processamento Multi-Agente Conclu√≠do com Sucesso!")
        print(f"üìä Status final: {api_manager.get_status()}")
        
        return final_note

    except Exception as e:
        print(f"‚ùå Erro durante o processamento: {e}")
        print(f"üìä Status no momento do erro: {api_manager.get_status()}")
        raise


if __name__ == "__main__":
    import time
    
    # Exemplo de uso (substitua pelas suas chaves reais)
    test_api_keys = [
        "sua_chave_1_aqui",
        "sua_chave_2_aqui",
        "sua_chave_3_aqui"
    ]

    test_content = """
    Este √© um conte√∫do de teste com algumas informa√ß√µes importantes. 
    Temos um bizu: Lembre-se da regra de ouro para resolver equa√ß√µes! 
    Uma f√≥rmula matem√°tica importante: $E=mc^2$. 
    Outra f√≥rmula: $$F = ma$$
    E uma quest√£o de revis√£o: Qual a capital do Brasil? 
    a) S√£o Paulo b) Rio de Janeiro c) Bras√≠lia d) Belo Horizonte
    Gabarito: c) Bras√≠lia. 
    Coment√°rio: A capital do Brasil √© Bras√≠lia, fundada em 21 de abril de 1960 e projetada por Oscar Niemeyer.
    """
    
    # Exemplo com modelos espec√≠ficos por agente
    custom_model_names = {
        'TranscriberExtractorAgent': 'gemini-pro',
        'StructurerVisualizerAgent': 'gemini-pro',
        'LatexExpertAgent': 'gemini-pro',
        'ObsidianFormatterAgent': 'gemini-pro'
    }

    try:
        processed_output = process_content_with_enhanced_agents(
            test_content, 
            test_api_keys, 
            custom_model_names
        )
        print(f"\nüìÑ SA√çDA FINAL DO SISTEMA:\n{processed_output}")
    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")

